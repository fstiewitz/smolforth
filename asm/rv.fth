VOCABULARY ASSEMBLER
[DEFINED] ADD-WORDLIST [IF] ' ASSEMBLER >BODY ADD-WORDLIST [THEN]
ONLY FORTH
ALSO ASSEMBLER DEFINITIONS

0 CELL+ CONSTANT WORDSIZE

2 BASE !

0110111 CONSTANT OP_LUI
0010111 CONSTANT OP_AUIPC
1101111 CONSTANT OP_JAL
1100111 CONSTANT OP_JALR
1100011 CONSTANT OP_BEQ
1100011 CONSTANT OP_BNE
1100011 CONSTANT OP_BLT
1100011 CONSTANT OP_BGE
1100011 CONSTANT OP_BLTU
1100011 CONSTANT OP_BGEU
0000011 CONSTANT OP_LB
0000011 CONSTANT OP_LH
0000011 CONSTANT OP_LW
0000011 CONSTANT OP_LBU
0000011 CONSTANT OP_LHU
0100011 CONSTANT OP_SB
0100011 CONSTANT OP_SH
0100011 CONSTANT OP_SW
0010011 CONSTANT OP_ADDI
0010011 CONSTANT OP_SLTI
0010011 CONSTANT OP_SLTIU
0010011 CONSTANT OP_XORI
0010011 CONSTANT OP_ORI
0010011 CONSTANT OP_ANDI
0010011 CONSTANT OP_SLLI
0010011 CONSTANT OP_SRLI
0010011 CONSTANT OP_SRAI
0110011 CONSTANT OP_ADD
0110011 CONSTANT OP_SUB
0110011 CONSTANT OP_SLL
0110011 CONSTANT OP_SLT
0110011 CONSTANT OP_SLTU
0110011 CONSTANT OP_XOR
0110011 CONSTANT OP_SRL
0110011 CONSTANT OP_SRA
0110011 CONSTANT OP_OR
0110011 CONSTANT OP_AND
0000011 CONSTANT OP_LWU
0000011 CONSTANT OP_LD
0100011 CONSTANT OP_SD
0011011 CONSTANT OP_ADDIW
0011011 CONSTANT OP_SLLIW
0011011 CONSTANT OP_SRLIW
0011011 CONSTANT OP_SRAIW
0111011 CONSTANT OP_ADDW
0111011 CONSTANT OP_SUBW
0111011 CONSTANT OP_SLLW
0111011 CONSTANT OP_SRLW
0111011 CONSTANT OP_SRAW

1110011 CONSTANT OP_SYSTEM

000 CONSTANT FUNC_JALR
000 CONSTANT FUNC_BEQ
001 CONSTANT FUNC_BNE
100 CONSTANT FUNC_BLT
101 CONSTANT FUNC_BGE
110 CONSTANT FUNC_BLTU
111 CONSTANT FUNC_BGEU
000 CONSTANT FUNC_LB
001 CONSTANT FUNC_LH
010 CONSTANT FUNC_LW
100 CONSTANT FUNC_LBU
101 CONSTANT FUNC_LHU
000 CONSTANT FUNC_SB
001 CONSTANT FUNC_SH
010 CONSTANT FUNC_SW
000 CONSTANT FUNC_ADDI
010 CONSTANT FUNC_SLTI
011 CONSTANT FUNC_SLTIU
100 CONSTANT FUNC_XORI
110 CONSTANT FUNC_ORI
111 CONSTANT FUNC_ANDI
001 CONSTANT FUNC_SLLI
101 CONSTANT FUNC_SRLI
101 CONSTANT FUNC_SRAI
000 CONSTANT FUNC_ADD
000 CONSTANT FUNC_SUB
001 CONSTANT FUNC_SLL
010 CONSTANT FUNC_SLT
011 CONSTANT FUNC_SLTU
100 CONSTANT FUNC_XOR
101 CONSTANT FUNC_SRL
101 CONSTANT FUNC_SRA
110 CONSTANT FUNC_OR
111 CONSTANT FUNC_AND
110 CONSTANT FUNC_LWU
011 CONSTANT FUNC_LD
011 CONSTANT FUNC_SD
000 CONSTANT FUNC_ADDIW
001 CONSTANT FUNC_SLLIW
101 CONSTANT FUNC_SRLIW
101 CONSTANT FUNC_SRAIW
000 CONSTANT FUNC_ADDW
000 CONSTANT FUNC_SUBW
001 CONSTANT FUNC_SLLW
101 CONSTANT FUNC_SRLW
101 CONSTANT FUNC_SRAW

0000000 CONSTANT IMM_SLLI
0000000 CONSTANT IMM_SRLI
0100000 CONSTANT IMM_SRAI
0000000 CONSTANT IMM_ADD
0100000 CONSTANT IMM_SUB
0000000 CONSTANT IMM_SLL
0000000 CONSTANT IMM_SLT
0000000 CONSTANT IMM_SLTU
0000000 CONSTANT IMM_XOR
0000000 CONSTANT IMM_SRL
0100000 CONSTANT IMM_SRA
0000000 CONSTANT IMM_OR
0000000 CONSTANT IMM_AND

HEX

0 S" RV64" ENVIRONMENT? AND [IF] DROP
: W,
    HERE 4 ALLOT
    [
    FF 84 32 83 C, C, C, C, \ t0 s0 -1*WORDSIZE lx
    FF 04 33 83 C, C, C, C, \ t2 s0 -2*WORDSIZE lx
    FF 04 04 13 C, C, C, C, \ s0 s0 -2*WORDSIZE addi
    00 72 A0 23 C, C, C, C, \ t2 t0 0 sw
    ]
;
[ELSE]
: W,
    HERE 4 ALLOT
    [
    FF C4 22 83 C, C, C, C, \ t0 s0 -1*WORDSIZE lx
    FF 84 23 83 C, C, C, C, \ t2 s0 -2*WORDSIZE lx
    FF 84 04 13 C, C, C, C, \ s0 s0 -2*WORDSIZE addi
    00 72 A0 23 C, C, C, C, \ t2 t0 0 sw
    ]
;
[THEN]


: ENCODE-JINSTR
    @ 7F AND >R SWAP R> ( imm reg val )
    SWAP 1F AND 7 LSHIFT OR SWAP ( val imm )
    DUP 0FFF000 AND 0C LSHIFT >R \ imm 19:12 ( val imm [ val
    DUP 0B RSHIFT 1 AND 14 LSHIFT >R \ imm 11 ( val imm [ val val
    DUP 1 RSHIFT 3FF AND 15 LSHIFT >R \ imm 1:20 ( val imm [ val val val
    14 RSHIFT 1 AND 1F LSHIFT \ val val [ val val val
    R> OR
    R> OR
    R> OR
    OR
;

: ENCODE-UINSTR
    @ 7F AND SWAP
    0C LSHIFT OR SWAP
    1F AND 7 LSHIFT OR
;

: ENCODE-BINSTR
    DUP @ SWAP CELL+ @ ( rs1 rs2 imm funct3 op )
    7F AND >R ( rs1 rs2 imm funct3 [ val ] )
    7 AND 0C LSHIFT R> OR >R ( rs1 rs2 imm [ val ] )

    DUP DUP DUP ( rs1 rs2 imm imm imm imm [ val ] )
    0B RSHIFT 1 AND 7 LSHIFT R> OR >R ( rs1 rs2 imm imm imm [ val ] )
    1E AND 7 LSHIFT R> OR >R ( rs1 rs2 imm imm [ val ] )
    7E0 AND 14 LSHIFT R> OR >R ( rs1 rs2 imm [ val ] )
    0C RSHIFT 1 AND 1F LSHIFT R> OR >R ( rs1 rs2 [ val ] )

    1F AND 0F LSHIFT R> OR >R ( rs1 [ val ] )
    1F AND 14 LSHIFT R> OR ( val )
;

: ENCODE-IINSTR
    DUP @ SWAP CELL+ @ ( rd rs1 imm funct3 op )
    7F AND >R
    7 AND 0C LSHIFT R> OR >R
    0FFF AND 14 LSHIFT R> OR >R
    1F AND 0F LSHIFT R> OR >R
    1F AND 7 LSHIFT R> OR
;

: ENCODE-SINSTR
    DUP @ SWAP CELL+ @ ( rs1 rs2 imm funct3 op )
    7F AND >R
    7 AND 0C LSHIFT R> OR >R

    DUP
    1F AND 7 LSHIFT R> OR >R
    0FE0 AND 14 LSHIFT R> OR >R

    1F AND 0F LSHIFT R> OR >R
    1F AND 14 LSHIFT R> OR
;

: ENCODE-RINSTR
    DUP @ SWAP CELL+ DUP @ SWAP CELL+ @ ( rd rs1 rs2 funct7 funct3 op )
    7F AND >R
    7 AND 0C LSHIFT R> OR >R
    7F AND 19 LSHIFT R> OR >R

    1F AND 14 LSHIFT R> OR >R
    1F AND 0F LSHIFT R> OR >R
    1F AND 7 LSHIFT R> OR
;

: JINSTR CREATE , DOES> ENCODE-JINSTR W, ;
: UINSTR CREATE , DOES> ENCODE-UINSTR W, ;
: BINSTR CREATE , , DOES> ENCODE-BINSTR W, ;
: IINSTR CREATE , , DOES> ENCODE-IINSTR W, ;
: SINSTR CREATE , , DOES> ENCODE-SINSTR W, ;
: RINSTR CREATE , , , DOES> ENCODE-RINSTR W, ;

2 BASE !

0110111   UINSTR *LUI
0010111   UINSTR *AUIPC
1101111   JINSTR *JAL
1100111 000  IINSTR *JALR
1100011 000  BINSTR *BEQ
1100011 001  BINSTR *BNE
1100011 100  BINSTR *BLT
1100011 101  BINSTR *BGE
1100011 110  BINSTR *BLTU
1100011 111  BINSTR *BGEU
0000011 000  IINSTR *LB
0000011 001  IINSTR *LH
0000011 010  IINSTR *LW
0000011 100  IINSTR *LBU
0000011 101  IINSTR *LHU
0100011 000  SINSTR *SB
0100011 001  SINSTR *SH
0100011 010  SINSTR *SW
0010011 000  IINSTR *ADDI
0010011 010  IINSTR *SLTI
0010011 011  IINSTR *SLTIU
0010011 100  IINSTR *XORI
0010011 110  IINSTR *ORI
0010011 111  IINSTR *ANDI
0010011 001 IMM_SLLI RINSTR *SLLI
0010011 101 IMM_SRLI RINSTR *SRLI
0010011 101 IMM_SRAI RINSTR *SRAI
0110011 000 IMM_ADD RINSTR *ADD
0110011 000 IMM_SUB RINSTR *SUB
0110011 001 IMM_SLL RINSTR *SLL
0110011 010 IMM_SLT RINSTR *SLT
0110011 011 IMM_SLTU RINSTR *SLTU
0110011 100 IMM_XOR RINSTR *XOR
0110011 101 IMM_SRL RINSTR *SRL
0110011 101 IMM_SRA RINSTR *SRA
0110011 110 IMM_OR RINSTR *OR
0110011 111 IMM_AND RINSTR *AND
0000011 110  IINSTR *LWU
0000011 011  IINSTR *LD
0100011 011  SINSTR *SD
0011011 000  IINSTR *ADDIW
0011011 001 IMM_SLLI RINSTR *SLLIW
0011011 101 IMM_SRLI RINSTR *SRLIW
0011011 101 IMM_SRAI RINSTR *SRAIW
0111011 000 IMM_ADD RINSTR *ADDW
0111011 000 IMM_SUB RINSTR *SUBW
0111011 001 IMM_SLL RINSTR *SLLW
0111011 101 IMM_SRL RINSTR *SRLW
0111011 101 IMM_SRA RINSTR *SRAW
0110011 0 1 RINSTR *MUL
0110011 1 1 RINSTR *MULH
0110011 10 1 RINSTR *MULHSU
0110011 11 1 RINSTR *MULHU
0110011 100 1 RINSTR *DIV
0110011 101 1 RINSTR *DIVU
0110011 110 1 RINSTR *REM
0110011 111 1 RINSTR *REMU
0111011 0 1 RINSTR *MULW
0111011 100 1 RINSTR *DIVW
0111011 101 1 RINSTR *DIVUW
0111011 110 1 RINSTR *REMW
0111011 111 1 RINSTR *REMUW

1110011 001 IINSTR *CSRRW
1110011 010 IINSTR *CSRRS
1110011 011 IINSTR *CSRRC
1110011 101 IINSTR *CSRRWI
1110011 110 IINSTR *CSRRSI
1110011 111 IINSTR *CSRRCI

HEX

: *MRET 30200073 W, ;
: *WFI 10500073 W, ;
: *ECALL 73 W, ;

DECIMAL

0 CONSTANT X0
1 CONSTANT X1
2 CONSTANT X2
3 CONSTANT X3
4 CONSTANT X4
5 CONSTANT X5
6 CONSTANT X6
7 CONSTANT X7
8 CONSTANT X8
9 CONSTANT X9
10 CONSTANT X10
11 CONSTANT X11
12 CONSTANT X12
13 CONSTANT X13
14 CONSTANT X14
15 CONSTANT X15
16 CONSTANT X16
17 CONSTANT X17
18 CONSTANT X18
19 CONSTANT X19
20 CONSTANT X20
21 CONSTANT X21
22 CONSTANT X22
23 CONSTANT X23
24 CONSTANT X24
25 CONSTANT X25
26 CONSTANT X26
27 CONSTANT X27
28 CONSTANT X28
29 CONSTANT X29
30 CONSTANT X30
31 CONSTANT X31
0 CONSTANT ZERO
X1 CONSTANT RA
X2 CONSTANT SP
X3 CONSTANT GP
X4 CONSTANT TP
X5 CONSTANT T0
X6 CONSTANT T1
X7 CONSTANT T2
X8 CONSTANT S0
X8 CONSTANT FP
X9 CONSTANT S1
X10 CONSTANT A0
X11 CONSTANT A1
X12 CONSTANT A2
X13 CONSTANT A3
X14 CONSTANT A4
X15 CONSTANT A5
X16 CONSTANT A6
X17 CONSTANT A7
X18 CONSTANT S2
X19 CONSTANT S3
X20 CONSTANT S4
X21 CONSTANT S5
X22 CONSTANT S6
X23 CONSTANT S7
X24 CONSTANT S8
X25 CONSTANT S9
X26 CONSTANT S10
X27 CONSTANT S11
X28 CONSTANT T3
X29 CONSTANT T4
X30 CONSTANT T5
X31 CONSTANT T6

HEX
100 CONSTANT SSTATUS
104 CONSTANT SIE
105 CONSTANT STVEC
106 CONSTANT SCOUNTEREN
10A CONSTANT SENVCFG
140 CONSTANT SSCRATCH
141 CONSTANT SEPC
142 CONSTANT SCAUSE
143 CONSTANT STVAL
144 CONSTANT SIP
180 CONSTANT SATP
5A8 CONSTANT SCONTEXT

F11 CONSTANT MVENDORID
F12 CONSTANT MARCHID
F13 CONSTANT MIMPID
F14 CONSTANT MHARTID
F15 CONSTANT MCONFIGPTR

300 CONSTANT MSTATUS
301 CONSTANT MISA
302 CONSTANT MEDELEG
303 CONSTANT MIDELEG
304 CONSTANT MIE
305 CONSTANT MTVEC
306 CONSTANT MCOUNTEREN
310 CONSTANT MSTATUSH

340 CONSTANT MSCRATCH
341 CONSTANT MEPC
342 CONSTANT MCAUSE
343 CONSTANT MTVAL
344 CONSTANT MIP
34A CONSTANT MTINST
34B CONSTANT MTVAL2
DECIMAL

0 S" RV64" ENVIRONMENT? AND [IF] DROP
: *LX *LD ;
: *SX *SD ;
[THEN]

0 S" RV32" ENVIRONMENT? AND [IF] DROP
: *LX *LW ;
: *SX *SW ;
[THEN]

: *ENTER
    RA S1 0 *SX
    S1 S1 WORDSIZE *ADDI
;

: *LEAVE
    S1 S1 WORDSIZE NEGATE *ADDI
    RA S1 0 *LX
    X0 RA 0 *JALR
;

: *RET X0 RA 0 *JALR ;

: *FETCH ( reg offset ) S0 SWAP CELLS NEGATE *LX ;

: *STORE ( reg offset ) S0 SWAP CELLS NEGATE *SX ;

: *FETCH+ ( regn reg1 n -- )
    1+ 1 DO
        S0 I CELLS NEGATE *LX
    LOOP
;

: *STORE+ ( regn reg1 n -- )
    1+ 1 DO
        S0 I CELLS NEGATE *SX
    LOOP
;

: *PUSH ( reg )
    S0 0 *SX
    S0 S0 1 CELLS *ADDI
;

: *POP ( reg )
    S0 S0 -1 CELLS *ADDI
    S0 0 *LX
;

: *GROW ( offset ) S0 S0 ROT CELLS *ADDI ;

: *OP2>1
    A1 A0 2 *FETCH+
    -1 *GROW
;

: __RV_END__ ;
