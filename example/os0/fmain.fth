INIT
HEX

HERE . .( 0 QUOTE start SYMBOL ) CR
ALSO ASSEMBLER
    HERE . .( 0 0 QUOTE GLOBAL_POINTER 0 RELOC-ADDR ) CR
    GP 0 *AUIPC
    GP GP 0 *ADDI

    HERE . .( 0 0 QUOTE STACK_TOP 0 RELOC-ADDR ) CR
    SP 0 *AUIPC
    SP SP 0 *ADDI

    HERE . .( 0 0 QUOTE DATA_STACK_BOTTOM 0 RELOC-ADDR ) CR
    S0 0 *AUIPC
    S0 S0 0 *ADDI

    HERE . .( 0 0 QUOTE RETURN_STACK_BOTTOM 0 RELOC-ADDR ) CR
    S1 0 *AUIPC
    S1 S1 0 *ADDI

    X0 X0 SATP *CSRRW

    HERE . .( 0 0 QUOTE TRAP_STACK_TOP 0 RELOC-ADDR ) CR
    T0 0 *AUIPC
    T0 T0 0 *ADDI
    X0 T0 MSCRATCH *CSRRW

    T0 X0 MSTATUS *CSRRS
    T0 *PUSH
    ] FFFFFFF7 AND [
    T0 *POP
    X0 T0 MSTATUS *CSRRW

    HERE . .( 0 0 QUOTE FORTH$body$TRAP_ENTRY 0 RELOC-ADDR ) CR
    T0 0 *AUIPC
    T0 T0 0 *ADDI
    X0 T0 MTVEC *CSRRW

    ] B00 [
    T0 *POP
    X0 T0 MIE *CSRRW

    T0 X0 MSTATUS *CSRRS
    T0 *PUSH
    ] BB OR [
    T0 *POP
    X0 T0 MSTATUS *CSRRW

    HERE . .( 0 0 QUOTE FORTH$body$KMAIN 0 RELOC-ADDR ) CR
    T0 0 *AUIPC
    T0 T0 0 *ADDI
    X0 T0 MEPC *CSRRW

    HERE . .( 0 0 QUOTE BSS_START 0 RELOC-ADDR ) CR
    T0 0 *AUIPC
    T0 T0 0 *ADDI
    T0 *PUSH
    HERE . .( 0 0 QUOTE BSS_END 0 RELOC-ADDR ) CR
    T0 0 *AUIPC
    T0 T0 0 *ADDI
    T0 *PUSH
    ] OVER - 0 FILL [

    HERE . .( 0 0 QUOTE FORTH$body$KMAIN 0 RELOC-EXECUTE ) CR
    RA 0 *AUIPC
    RA RA 0 *JALR

    ] 5555 100000 [
    A1 1 *FETCH
    A0 2 *FETCH
    A0 A1 0 *SW
    \ ] BEGIN [ *WFI ] AGAIN [ endless loop

PREVIOUS

DECIMAL
CODE TRAP_ENTRY
    SP SP MSCRATCH *CSRRW
    SP SP -32 CELLS *ADDI
    X1 SP 1 CELLS *SD
    X2 SP 2 CELLS *SD
    X3 SP 3 CELLS *SD
    X4 SP 4 CELLS *SD
    X5 SP 5 CELLS *SD
    X6 SP 6 CELLS *SD
    X7 SP 7 CELLS *SD
    X8 SP 8 CELLS *SD
    X9 SP 9 CELLS *SD
    X10 SP 10 CELLS *SD
    X11 SP 11 CELLS *SD
    X12 SP 12 CELLS *SD
    X13 SP 13 CELLS *SD
    X14 SP 14 CELLS *SD
    X15 SP 15 CELLS *SD
    X16 SP 16 CELLS *SD
    X17 SP 17 CELLS *SD
    X18 SP 18 CELLS *SD
    X19 SP 19 CELLS *SD
    X20 SP 20 CELLS *SD
    X21 SP 21 CELLS *SD
    X22 SP 22 CELLS *SD
    X23 SP 23 CELLS *SD
    X24 SP 24 CELLS *SD
    X25 SP 25 CELLS *SD
    X26 SP 26 CELLS *SD
    X27 SP 27 CELLS *SD
    X28 SP 28 CELLS *SD
    X29 SP 29 CELLS *SD
    X30 SP 30 CELLS *SD
    X31 SP 31 CELLS *SD
HEX

    HERE . .( 0 0 QUOTE TRAP_DATA_STACK_BOTTOM 0 RELOC-ADDR ) CR
    S0 0 *AUIPC
    S0 S0 0 *ADDI

    HERE . .( 0 0 QUOTE TRAP_RETURN_STACK_BOTTOM 0 RELOC-ADDR ) CR
    S1 0 *AUIPC
    S1 S1 0 *ADDI

    A0 X0 MCAUSE *CSRRS
    A0 *PUSH

    HERE . .( 0 0 QUOTE FORTH$body$IRQ_ENTRY 0 RELOC-EXECUTE ) CR
    RA 0 *AUIPC
    RA RA 0 *JALR

DECIMAL
    X1 SP 1 CELLS *LD
    X2 SP 2 CELLS *LD
    X3 SP 3 CELLS *LD
    X4 SP 4 CELLS *LD
    X5 SP 5 CELLS *LD
    X6 SP 6 CELLS *LD
    X7 SP 7 CELLS *LD
    X8 SP 8 CELLS *LD
    X9 SP 9 CELLS *LD
    X10 SP 10 CELLS *LD
    X11 SP 11 CELLS *LD
    X12 SP 12 CELLS *LD
    X13 SP 13 CELLS *LD
    X14 SP 14 CELLS *LD
    X15 SP 15 CELLS *LD
    X16 SP 16 CELLS *LD
    X17 SP 17 CELLS *LD
    X18 SP 18 CELLS *LD
    X19 SP 19 CELLS *LD
    X20 SP 20 CELLS *LD
    X21 SP 21 CELLS *LD
    X22 SP 22 CELLS *LD
    X23 SP 23 CELLS *LD
    X24 SP 24 CELLS *LD
    X25 SP 25 CELLS *LD
    X26 SP 26 CELLS *LD
    X27 SP 27 CELLS *LD
    X28 SP 28 CELLS *LD
    X29 SP 29 CELLS *LD
    X30 SP 30 CELLS *LD
    X31 SP 31 CELLS *LD

    SP SP 32 CELLS *ADDI
    SP SP MSCRATCH *CSRRW
    *MRET
END-CODE

CSPACE

: IRQ_ENTRY ( mcause -- )
    DROP
;

BEGIN-STRUCTURE IO:UART
    0 +FIELD IO:UART:RBR
    0 +FIELD IO:UART:THR
    1 +FIELD IO:UART:DLL
    0 +FIELD IO:UART:IER
    1 +FIELD IO:UART:DLM
    0 +FIELD IO:UART:IIR
    1 +FIELD IO:UART:FCR
    CFIELD: IO:UART:LCR
    CFIELD: IO:UART:MCR
    CFIELD: IO:UART:LSR
    CFIELD: IO:UART:MSR
END-STRUCTURE

HEX
10000000 CONSTANT IO:UART:BASEPTR

: IO:UART:INIT
    3 IO:UART:BASEPTR IO:UART:LCR C!
    1 IO:UART:BASEPTR IO:UART:FCR C!
    IO:UART:BASEPTR IO:UART:LCR DUP C@ 80 OR SWAP C!
    0C DUP
    FF AND IO:UART:BASEPTR IO:UART:DLL C!
    8 RSHIFT IO:UART:BASEPTR IO:UART:DLM C!
    3 IO:UART:BASEPTR IO:UART:LCR C!
    1 IO:UART:BASEPTR IO:UART:IER C!
;

: EMIT
    IO:UART:BASEPTR IO:UART:THR C!
    BEGIN
        IO:UART:BASEPTR IO:UART:LSR C@ 60 AND 60 =
    UNTIL
;

: CR 0D EMIT 0A EMIT ;

: TYPE
    BEGIN
        DUP 0<>
    WHILE
        OVER C@ EMIT
        1 /STRING
    REPEAT
    2DROP
;

: KMAIN ( -- )
    IO:UART:INIT
    ." Hello, World!" CR
    ."  -- from example/os0" CR
;
