REQUIRE file.fth
REQUIRE memory.fth

DECIMAL

ONLY FORTH DEFINITIONS
VOCABULARY MEMFILE-WL
ALSO MEMFILE-WL DEFINITIONS
ALSO FILE

BEGIN-STRUCTURE MEMFILE
    FILE-DESCRIPTOR +FIELD MEMFILE:DESC
    FIELD: MEMFILE:DESC:START
    FIELD: MEMFILE:DESC:OFFSET
    FIELD: MEMFILE:DESC:SIZE
END-STRUCTURE

: MEMFILE:CLOSE FREE ;
: MEMFILE:POSITION MEMFILE:DESC:OFFSET @ S>D 0 ;
: MEMFILE:SIZE MEMFILE:DESC:SIZE @ S>D 0 ;
: MEMFILE:REPOSITION
    >R
    2DUP
    R@ MEMFILE:DESC:SIZE @ S>D D< IF
        D>S R> MEMFILE:DESC:OFFSET ! 0
    ELSE
        2DROP R> DROP -36
    THEN
;

: MEMFILE:WRITE 2DROP DROP -21 ;

: MEMFILE:READ ( c-addr u fptr -- u2 ior )
    >R
    DUP 0 > INVERT IF
        R> DROP
        2DROP
        0 -1
        EXIT
    THEN
    R@ MEMFILE:DESC:SIZE @ R@ MEMFILE:DESC:OFFSET @ - MIN
    \ c-addr u2
    DUP 0 < IF
        R> DROP 2DROP 0 -37 EXIT
    THEN
    R@ MEMFILE:DESC:START @ R@ MEMFILE:DESC:OFFSET @ +
    \ c-addr u2 head
    SWAP >R SWAP R@ MOVE
    R> R> OVER SWAP MEMFILE:DESC:OFFSET +!
    0
;

ALSO FORTH DEFINITIONS

: MEMFILE:NEW ( c-addr u -- )
    MEMFILE ALLOCATE THROW
    DUP >R MEMFILE:DESC:SIZE !
    R@ MEMFILE:DESC:START !
    0 R@ MEMFILE:DESC:OFFSET !
    ['] MEMFILE:READ R@ MEMFILE:DESC FILE:READ !
    ['] MEMFILE:WRITE R@ MEMFILE:DESC FILE:WRITE !
    ['] MEMFILE:CLOSE R@ MEMFILE:DESC FILE:CLOSE !
    ['] MEMFILE:POSITION R@ MEMFILE:DESC FILE:POSITION !
    ['] MEMFILE:SIZE R@ MEMFILE:DESC FILE:SIZE !
    ['] MEMFILE:REPOSITION R@ MEMFILE:DESC FILE:REPOSITION !
    R> 1 RSHIFT
;
