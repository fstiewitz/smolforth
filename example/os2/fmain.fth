INIT
HEX

HERE . .( 0 QUOTE start SYMBOL ) CR
ALSO ASSEMBLER
    HERE . .( 0 0 QUOTE GLOBAL_POINTER 0 RELOC-ADDR ) CR
    GP 0 *AUIPC
    GP GP 0 *ADDI

    HERE . .( 0 0 QUOTE STACK_TOP 0 RELOC-ADDR ) CR
    SP 0 *AUIPC
    SP SP 0 *ADDI

    HERE . .( 0 0 QUOTE DATA_STACK_BOTTOM 0 RELOC-ADDR ) CR
    S0 0 *AUIPC
    S0 S0 0 *ADDI

    HERE . .( 0 0 QUOTE RETURN_STACK_BOTTOM 0 RELOC-ADDR ) CR
    S1 0 *AUIPC
    S1 S1 0 *ADDI

    X0 X0 SATP *CSRRW

    HERE . .( 0 0 QUOTE TRAP_STACK_TOP 0 RELOC-ADDR ) CR
    T0 0 *AUIPC
    T0 T0 0 *ADDI
    X0 T0 MSCRATCH *CSRRW

    T0 X0 MSTATUS *CSRRS
    T0 *PUSH
    ] FFFFFFF7 AND [
    T0 *POP
    X0 T0 MSTATUS *CSRRW

    HERE . .( 0 0 QUOTE FORTH$body$TRAP_ENTRY 0 RELOC-ADDR ) CR
    T0 0 *AUIPC
    T0 T0 0 *ADDI
    X0 T0 MTVEC *CSRRW

    ] B00 [
    T0 *POP
    X0 T0 MIE *CSRRW

    T0 X0 MSTATUS *CSRRS
    T0 *PUSH
    ] BB OR [
    T0 *POP
    X0 T0 MSTATUS *CSRRW

    HERE . .( 0 0 QUOTE FORTH$body$KMAIN 0 RELOC-ADDR ) CR
    T0 0 *AUIPC
    T0 T0 0 *ADDI
    X0 T0 MEPC *CSRRW

    HERE . .( 0 0 QUOTE BSS_START 0 RELOC-ADDR ) CR
    T0 0 *AUIPC
    T0 T0 0 *ADDI
    T0 *PUSH
    HERE . .( 0 0 QUOTE BSS_END 0 RELOC-ADDR ) CR
    T0 0 *AUIPC
    T0 T0 0 *ADDI
    T0 *PUSH
    ] OVER - 0 FILL [

    HERE . .( 0 0 QUOTE FORTH$body$KMAIN 0 RELOC-EXECUTE ) CR
    RA 0 *AUIPC
    RA RA 0 *JALR

    ] 5555 100000 [
    A1 1 *FETCH
    A0 2 *FETCH
    A0 A1 0 *SW
    ] BEGIN [ *WFI ] AGAIN [

PREVIOUS

DECIMAL
CODE TRAP_ENTRY
    SP SP MSCRATCH *CSRRW
    SP SP -32 CELLS *ADDI
    X1 SP 1 CELLS *SD
    X2 SP 2 CELLS *SD
    X3 SP 3 CELLS *SD
    X4 SP 4 CELLS *SD
    X5 SP 5 CELLS *SD
    X6 SP 6 CELLS *SD
    X7 SP 7 CELLS *SD
    X8 SP 8 CELLS *SD
    X9 SP 9 CELLS *SD
    X10 SP 10 CELLS *SD
    X11 SP 11 CELLS *SD
    X12 SP 12 CELLS *SD
    X13 SP 13 CELLS *SD
    X14 SP 14 CELLS *SD
    X15 SP 15 CELLS *SD
    X16 SP 16 CELLS *SD
    X17 SP 17 CELLS *SD
    X18 SP 18 CELLS *SD
    X19 SP 19 CELLS *SD
    X20 SP 20 CELLS *SD
    X21 SP 21 CELLS *SD
    X22 SP 22 CELLS *SD
    X23 SP 23 CELLS *SD
    X24 SP 24 CELLS *SD
    X25 SP 25 CELLS *SD
    X26 SP 26 CELLS *SD
    X27 SP 27 CELLS *SD
    X28 SP 28 CELLS *SD
    X29 SP 29 CELLS *SD
    X30 SP 30 CELLS *SD
    X31 SP 31 CELLS *SD
HEX

    HERE . .( 0 0 QUOTE TRAP_DATA_STACK_BOTTOM 0 RELOC-ADDR ) CR
    S0 0 *AUIPC
    S0 S0 0 *ADDI

    HERE . .( 0 0 QUOTE TRAP_RETURN_STACK_BOTTOM 0 RELOC-ADDR ) CR
    S1 0 *AUIPC
    S1 S1 0 *ADDI

    A0 X0 MCAUSE *CSRRS
    A0 *PUSH

    HERE . .( 0 0 QUOTE FORTH$body$IRQ_ENTRY 0 RELOC-EXECUTE ) CR
    RA 0 *AUIPC
    RA RA 0 *JALR

DECIMAL
    X1 SP 1 CELLS *LD
    X2 SP 2 CELLS *LD
    X3 SP 3 CELLS *LD
    X4 SP 4 CELLS *LD
    X5 SP 5 CELLS *LD
    X6 SP 6 CELLS *LD
    X7 SP 7 CELLS *LD
    X8 SP 8 CELLS *LD
    X9 SP 9 CELLS *LD
    X10 SP 10 CELLS *LD
    X11 SP 11 CELLS *LD
    X12 SP 12 CELLS *LD
    X13 SP 13 CELLS *LD
    X14 SP 14 CELLS *LD
    X15 SP 15 CELLS *LD
    X16 SP 16 CELLS *LD
    X17 SP 17 CELLS *LD
    X18 SP 18 CELLS *LD
    X19 SP 19 CELLS *LD
    X20 SP 20 CELLS *LD
    X21 SP 21 CELLS *LD
    X22 SP 22 CELLS *LD
    X23 SP 23 CELLS *LD
    X24 SP 24 CELLS *LD
    X25 SP 25 CELLS *LD
    X26 SP 26 CELLS *LD
    X27 SP 27 CELLS *LD
    X28 SP 28 CELLS *LD
    X29 SP 29 CELLS *LD
    X30 SP 30 CELLS *LD
    X31 SP 31 CELLS *LD

    SP SP 32 CELLS *ADDI
    SP SP MSCRATCH *CSRRW
    *MRET
END-CODE

CSPACE

ALSO ASSEMBLER
: W!
    [ A1 1 *FETCH ]
    [ A0 2 *FETCH ]
    [ -2 *GROW ]
    [ A0 A1 0 *SW ]
;
: W@
    [ A0 1 *FETCH ]
    [ A0 A0 0 *LW ]
    [ A0 1 *STORE ]
;
: MEPC
    [ A0 X0 MEPC *CSRRS ]
    [ A0 *PUSH ]
;
: MEPC!
    [ A0 *POP ]
    [ X0 A0 MEPC *CSRRW ]
;
: WFI
    [ *WFI ]
;
PREVIOUS

HEX
: QEMU:SHUTDOWN
    5555 100000 W!
;
DECIMAL

: BYE QEMU:SHUTDOWN ;

INCLUDE0 ../../facility-code.fth
INCLUDE0 ../../facility0.fth
INCLUDE0 util.fth

INCLUDE0 plic.fth
INCLUDE0 uart.fth

INCLUDE0 memory.fth
REQUIRE file.fth
REQUIRE memfile.fth

INCLUDE0 ramblock.fth
INCLUDE0 ../../block.fth
INCLUDE0 ../../editor.fth

INCLUDE tardisk.fth

ONLY FORTH DEFINITIONS
ALSO HOST

INCLUDE0 ../../file.fth
INCLUDE0 ../../file2.fth

PREVIOUS

ALSO PLIC

DECIMAL

: HANDLE-EXTERNAL-IRQ ( -- )
    0 PLIC:CLAIM
    DUP CASE
        10 OF IO:UART:IRQ ENDOF
        ." UNKNOWN EXTERNAL IRQ " DUP . CR
    ENDCASE
    0 PLIC:COMPLETE
;

: HANDLE-INTERRUPT ( interrupt -- )
    CASE
        11 OF HANDLE-EXTERNAL-IRQ ENDOF
        ." INTERRUPT " DUP . CR
    ENDCASE
;

: TRAP-REGISTER
    CELLS
[
    ALSO ASSEMBLER
    ALSO HOST
    HEX
    HERE . .( 0 0 QUOTE TRAP_STACK_TOP 0 RELOC-ADDR ) CR
    DECIMAL
    A0 0 *AUIPC
    A0 A0 0 *ADDI
    A0 *PUSH
    PREVIOUS
    PREVIOUS
]
    -32 CELLS + +
;

CODE INFINITE-LOOP ] BEGIN [ *WFI ] AGAIN [ END-CODE

VARIABLE M-ENV-WFI

ALSO IO:UART
: M-ENV-CALL:WU-EKEY
    M-ENV-WFI @ MEPC!
    0 M-ENV-WFI !
    0 UART:EKEY-WFI !
    POPCHAR IF
        10 TRAP-REGISTER !
    ELSE
        0 10 TRAP-REGISTER !
    THEN
;

: M-ENV-CALL:EKEY
    POPCHAR IF
        10 TRAP-REGISTER !
        MEPC 4 + MEPC!
    ELSE
        MEPC 4 + M-ENV-WFI !
        ['] M-ENV-CALL:WU-EKEY UART:EKEY-WFI !
    [
        ALSO ASSEMBLER
        ALSO HOST
        HEX
        HERE . .( 0 0 QUOTE FORTH$body$INFINITE-LOOP 0 RELOC-ADDR ) CR
        DECIMAL
        A0 0 *AUIPC
        A0 A0 0 *ADDI
        A0 *PUSH
        PREVIOUS
        PREVIOUS
    ]
        MEPC!
    THEN
;

ALSO RING
: M-ENV-CALL:EKEY?
    QUEUE RING:EMPTY? INVERT
    10 TRAP-REGISTER !
    MEPC 4 + MEPC!
;
PREVIOUS

PREVIOUS

: M-ENV-CALL
    10 TRAP-REGISTER @ CASE
        0 OF ( EKEY ) M-ENV-CALL:EKEY ENDOF
        1 OF ( __assert_fail )
            12 TRAP-REGISTER @ CCOUNT TYPE SPACE
            13 TRAP-REGISTER @ U.
            14 TRAP-REGISTER @ CCOUNT TYPE SPACE
            ." ASSERTION "
            11 TRAP-REGISTER @ CCOUNT TYPE SPACE
            ." FAILED." CR
            ['] QUIT >BODY MEPC!
        ENDOF
        2 OF ( EKEY? ) M-ENV-CALL:EKEY? ENDOF
        ." UNKNOWN M-ENV CALL " DUP U. ." AT " MEPC U. CR
        ['] QUIT >BODY MEPC!
    ENDCASE
;

: HANDLE-EXCEPTION ( exception -- )
    BASE @ >R
    HEX
    DUP CASE
        0 OF ." INSTRUCTION ADDRESS MISALIGNED" CR ENDOF
        1 OF ." INSTRUCTION ACCESS FAULT AT " MEPC U. CR ENDOF
        2 OF ." ILLEGAL INSTRUCTION AT " MEPC U. CR ENDOF
        3 OF ." BREAKPOINT" CR ENDOF
        4 OF ." LOAD ADDRESS MISALIGNED" CR ENDOF
        5 OF ." LOAD ACCESS FAULT AT " MEPC U. CR ENDOF
        6 OF ." STORE/AMO ADDRESS MISASLIGNED" CR ENDOF
        7 OF ." STORE/AMO ACCESS FAULT AT " MEPC U. CR ENDOF
        8 OF ." ENV-CALL FROM U-MODE" CR ENDOF
        9 OF ." ENV-CALL FROM S-MODE" CR ENDOF
        10 OF ." RESERVED 10" CR ENDOF
        11 OF M-ENV-CALL ENDOF
        12 OF ." INSTRUCTION PAGE FAULT" CR ENDOF
        13 OF ." LOAD PAGE FAULT" CR ENDOF
        14 OF ." RESERVED" CR ENDOF
        15 OF ." STORE/AMO PAGE FAULT" CR ENDOF
        ." UNKNOWN EXCEPTION " DUP . CR
    ENDCASE
    8 12 WITHIN INVERT IF
        9 TRAP-REGISTER @
        BEGIN
            DUP STATE SYS:RETURN-STACK-PTR @ U>
        WHILE
            DUP @ U. CR
            1 CELLS -
        REPEAT
        DROP
        BEGIN
        AGAIN
    THEN
    R> BASE !
;

: IRQ_ENTRY ( mcause -- )
    DUP 63 RSHIFT IF
        -1 1 RSHIFT AND HANDLE-INTERRUPT
    ELSE
        HANDLE-EXCEPTION
    THEN
;

ALSO MEMORY-ALLOC

: SETUP-SYSTEM
    STATE SYS:HEADER 0 FILL
    10 BASE !
[
    ALSO ASSEMBLER
    ALSO HOST
    HEX
    HERE . .( 0 0 QUOTE KERNEL_END 0 RELOC-ADDR ) CR
    A0 0 *AUIPC
    A0 A0 0 *ADDI
    A0 *PUSH

    HERE . .( 0 0 QUOTE DATA_STACK_BOTTOM 0 RELOC-ADDR ) CR
    A0 0 *AUIPC
    A0 A0 0 *ADDI
    A0 *PUSH

    HERE . .( 0 0 QUOTE RETURN_STACK_BOTTOM 0 RELOC-ADDR ) CR
    A0 0 *AUIPC
    A0 A0 0 *ADDI
    A0 *PUSH
    DECIMAL
    PREVIOUS
    PREVIOUS
]
    CELL+ STATE SYS:RETURN-STACK-PTR !
    STATE SYS:STACK-PTR !
    4096 1 CELLS - STATE SYS:RETURN-STACK-SIZE !
    4096 STATE SYS:STACK-SIZE !

    4095 + -4096 AND
    DUP STATE SYS:CODE DATA:START !
    ['] IRQ_ENTRY STATE SYS:CODE DATA:GATE !
    DUP STATE SYS:CODE DATA:HERE !
    16 1024 1024 * * + STATE SYS:CODE DATA:END !

    7 STATE SYS:CODE DATA:FLAGS !
    0 STATE SYS:CODE DATA:WORD !

    STATE SYS:CODE
    DUP STATE SYS:ADATA !
    DUP STATE SYS:CDATA !
    DUP STATE SYS:IDATA !
    DUP STATE SYS:UDATA !
    DUP STATE SYS:UIDATA !
    STATE SYS:ICDATA !

    ONLY FORTH DEFINITIONS
    ['] QUIT-CAUGHT-HANDLER ['] FORTH >BODY !

    HERE 1024 1024 * ALLOT
    DUP TO ALLOCATION-AREA
    1024 1024 * INIT-ALLOCATION-AREA
;

PREVIOUS

: KMAIN ( -- )
    10 BASE !
    10 0 PLIC:ENABLE
    0 0 PLIC:MACHINE PLIC:THRESHOLD W!
    7 10 PLIC:PRIORITY W!
    IO:UART:INIT
    ['] QUIT-CAUGHT-HANDLER IS QUIT-CAUGHT
    \ BEGIN
    \     LINE-BUFFER 256 ACCEPT TYPE CR
    \ AGAIN
    BEGIN
        SETUP-SYSTEM
        QUIT
    AGAIN
;

: QUIT-CAUGHT-HANDLER ( n -- )
    CASE
        0 OF EXIT ENDOF
        -1 OF ." UNCAUGHT ABORT" CR ENDOF
        -2 OF
            ." UNCAUGHT ABORT" [CHAR] " EMIT SPACE
            ERR-STRING @ ERR-SIZE @ TYPE CR
        ENDOF
        -13 OF
            ." UNCAUGHT UNDEFINED WORD "
            ERR-STRING @ ERR-SIZE @ TYPE CR
        ENDOF
        -38 OF
            ." UNCAUGHT NON-EXISTENT FILE "
            ERR-STRING @ ERR-SIZE @ TYPE CR
        ENDOF
        ." UNCAUGHT ERROR " DUP . CR
    ENDCASE
    1
;
